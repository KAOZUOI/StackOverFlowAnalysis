package com.dhre.realconnect.notificationService.config;import java.util.Properties;import javax.sql.DataSource;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.jdbc.DataSourceBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;import org.springframework.orm.jpa.JpaTransactionManager;import org.springframework.orm.jpa.JpaVendorAdapter;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.annotation.EnableTransactionManagement;import com.dhre.realconnect.notificationService.notificationEntities.MessageEntity;/** * Notification Database config class *  * */@Configuration@EnableTransactionManagement@EnableJpaRepositories(entityManagerFactoryRef = &quot;notificationEntityManagerFactory&quot;, transactionManagerRef = &quot;notificationTransactionManager&quot;, basePackages = {        &quot;com.dhre.realconnect.notificationService.notificationRepository&quot; })public class NotificationDataSourceConfig {    @Value(&quot;${spring.datasource.notification.driverClassName}&quot;)    private String driverClassName;    @Value(&quot;${spring.datasource.notification.url}&quot;)    private String databaseUrl;    @Value(&quot;${spring.datasource.notification.username}&quot;)    private String databaseUserName;    @Value(&quot;${spring.datasource.notification.password}&quot;)    private String databasePassword;    @Value(&quot;${spring.jpa.show-sql}&quot;)    private String hibernateShowSql;    @Value(&quot;${spring.jpa.properties.hibernate.dialect}&quot;)    private String hibernateDialect;    // TODO add multiple data source needs to be added    @Primary    @Bean(name=&quot;notificationEntityManagerFactory&quot;)    public LocalContainerEntityManagerFactoryBean notificationEntityManagerFactory() {        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();        em.setDataSource(getDataSource());        em.setPackagesToScan(new String[] { MessageEntity.class.getPackageName() });        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();        em.setJpaVendorAdapter(vendorAdapter);        em.setJpaProperties(additionalProperties());        return em;    }    @Primary    @Bean    public DataSource getDataSource() {        DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();        // make rest calls here to fetch username and password from the configration        // server        dataSourceBuilder.driverClassName(driverClassName);        dataSourceBuilder.url(databaseUrl);        dataSourceBuilder.username(databaseUserName);        dataSourceBuilder.password(databasePassword);        return dataSourceBuilder.build();    }    @Primary    @Bean(name=&quot;notificationTransactionManager&quot;)    public PlatformTransactionManager notificationTransactionManager() {        JpaTransactionManager jpaTransactionManager = new JpaTransactionManager();        jpaTransactionManager.setEntityManagerFactory(notificationEntityManagerFactory().getObject());        return jpaTransactionManager;    }    @Primary    @Bean    public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {        return new PersistenceExceptionTranslationPostProcessor();    }    Properties additionalProperties() {        Properties properties = new Properties();        properties.setProperty(&quot;hibernate.show_sql&quot;, hibernateShowSql);        properties.setProperty(&quot;hibernate.properties.dialect&quot;, hibernateDialect);        return properties;    }}