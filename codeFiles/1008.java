`package com.example.eprepareacademy2o;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Bundle;import android.util.Log;import android.view.Window;import android.webkit.DownloadListener;import android.webkit.ValueCallback;import android.webkit.WebChromeClient;import android.webkit.WebView;import android.webkit.WebViewClient;import androidx.appcompat.app.AppCompatActivity;public class MainActivity extends AppCompatActivity {    String websiteURL = &quot;xyz.com/&quot;; // sets web url    private WebView webview;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        if( ! CheckNetwork.isInternetAvailable(this)) //returns true if internet available        {            //if there is no internet do this            setContentView(R.layout.activity_main);            new AlertDialog.Builder(this) //alert the person knowing they are about to close                    .setTitle(&quot;No internet connection available&quot;)                    .setMessage(&quot;Please Check you're Mobile data or Wifi network.&quot;)                    .setPositiveButton(&quot;Ok&quot;, new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            finish();                        }                    })                    .show();        }        else        {            //Webview stuff            webview = findViewById(R.id.webView);            webview.getSettings().setJavaScriptEnabled(true);            webview.getSettings().setAllowFileAccess(true);            webview.getSettings().setAllowFileAccess(true);            webview.getSettings().setAllowFileAccessFromFileURLs(true);            webview.getSettings().setAllowUniversalAccessFromFileURLs(true);            webview.setWebChromeClient(new WebChromeClient() {                public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams) {                    // Handle file upload                    return true;                }            });            webview.setDownloadListener(new DownloadListener() {                public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {                    // Handle file download                }            });            webview.setWebViewClient(new WebViewClient() {                public boolean shouldOverrideUrlLoading(WebView webView, String url) {                    if (url.endsWith(&quot;.pdf&quot;)) {                        // Handle PDF file download                        return true;                    }                    // Handle other types of file downloads                    return false;                }            });            webview.loadUrl(&quot;xyz.com/&quot;);            webview.getSettings().setDomStorageEnabled(true);            webview.setOverScrollMode(WebView.OVER_SCROLL_NEVER);            webview.loadUrl(websiteURL);            webview.setWebViewClient(new WebViewClientDemo());            webview.setWebChromeClient(new WebChromeClient() {                @Override                public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams) {                    // Handle file upload                    return true;                }            });        }    }    private class WebViewClientDemo extends WebViewClient {        @Override        //Keep webview in app when clicking links        public boolean shouldOverrideUrlLoading(WebView view, String url) {            if (url.startsWith(&quot;http:&quot;) || url.startsWith(&quot;https:&quot;)) {                view.loadUrl(url);                return true;            } else {                //Handle internal links                view.loadUrl(websiteURL + url);                return true;            }        }    }    @Override    public void onBackPressed() { //if user presses the back button do this        if (webview.isFocused() && webview.canGoBack()) { //check if in webview and the user can go back            webview.goBack(); //go back in webview        } else { //do this if the webview cannot go back any further            new AlertDialog.Builder(this) //alert the person knowing they are about to close                    .setTitle(&quot;EXIT&quot;)                    .setMessage(&quot;Are you sure. You want to close this app?&quot;)                    .setPositiveButton(&quot;Yes&quot;, new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            finish();                        }                    })                    .setNegativeButton(&quot;No&quot;, null)                    .show();        }    }}class CheckNetwork {    private static final String TAG = CheckNetwork.class.getSimpleName();    public static boolean isInternetAvailable(Context context)    {        NetworkInfo info = (NetworkInfo) ((ConnectivityManager)                context.getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();        if (info == null)        {            Log.d(TAG,&quot;no internet connection&quot;);            return false;        }        else        {            if(info.isConnected())            {                Log.d(TAG,&quot; internet connection available...&quot;);                return true;            }            else            {                Log.d(TAG,&quot; internet connection&quot;);                return true;            }        }    }    private class WebViewClientDemo extends WebViewClient {        @Override        //Keep webview in app when clicking links        public boolean shouldOverrideUrlLoading(WebView view, String url) {            view.loadUrl(url);            return true;        }        @Override        public void onPageFinished(WebView view, String url) {            super.onPageFinished(view, url);            // Enable full screen for embedded items            view.loadUrl(&quot;javascript:(function() { &quot; +                    &quot;var videos = document.getElementsByTagName('video'); &quot; +                    &quot;for(var i=0;i<videos.length;i++) { &quot; +                    &quot;videos[i].setAttribute('webkit-playsinline', ''); &quot; +                    &quot;videos[i].setAttribute('playsinline', ''); &quot; +                    &quot;videos[i].setAttribute('controls', ''); &quot; +                    &quot;videos[i].setAttribute('style', 'max-width:100%; height:auto;'); &quot; +                    &quot;}&quot; +                    &quot;var iframes = document.getElementsByTagName('iframe');&quot; +                    &quot;for(var i=0;i<iframes.length;i++){&quot; +                    &quot;if(iframes[i].src.includes('youtube') || iframes[i].src.includes('vimeo')) {&quot; +                    &quot;iframes[i].setAttribute('frameborder', '0');&quot; +                    &quot;iframes[i].setAttribute('allowfullscreen', '');&quot; +                    &quot;iframes[i].setAttribute('webkitallowfullscreen', '');&quot; +                    &quot;iframes[i].setAttribute('mozallowfullscreen', '');&quot; +                    &quot;iframes[i].setAttribute('style', 'width:100%; height:100%;');&quot; +                    &quot;}&quot; +                    &quot;}&quot; +                    &quot;})()&quot;);        }    }}`