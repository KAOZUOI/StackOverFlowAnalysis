package com.stdbankjwtauth.authsystem;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;import com.stdbankjwtauth.authsystem.models.AuthenticationRequest;import com.stdbankjwtauth.authsystem.models.AuthenticationResponse;import com.stdbankjwtauth.authsystem.util.JwtUtil;@RestControllerpublic class AuthenticateEnpoint {    @Autowired    private AuthenticationManager authenticationManager;        @Autowired    private UserDetailsService userDetailsService;        @Autowired    private JwtUtil jwtTokenUtil;        @PostMapping(&quot;/authenticates&quot;)    public ResponseEntity <?> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest) throws Exception{        try {            authenticationManager.authenticate(                new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(),authenticationRequest.getPassword())                );        }catch(BadCredentialsException e) {            throw new Exception(&quot;Incorrect username or password&quot;,e);            }                final UserDetails userDetails = userDetailsService                .loadUserByUsername(authenticationRequest.getUsername());        final String jwt = jwtTokenUtil.generateToken(userDetails);        return ResponseEntity.ok(new AuthenticationResponse(jwt));    }}