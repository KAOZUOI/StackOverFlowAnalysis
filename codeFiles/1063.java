import java.io.*;import java.util.Scanner;public class Topic_7_HW {    public static void printAcct(Scanner inputFile, PrintWriter outputFile, int[] acctNum, double[] balance,            int numAccts) {        for (int n = 0; n <= numAccts; n++) {            outputFile.printf(&quot;\n %1f Account Number: &quot;, acctNum[n]);            outputFile.printf(&quot;\n %1f Account Balance: &quot;, balance[n]);        }    }    public static int readAccts(Scanner inputFile, PrintWriter outputFile, int[] acctNum, double[] balance) {        int numAccts = 0;        while (inputFile.hasNext()) {            acctNum[numAccts] = inputFile.nextInt();            balance[numAccts] = inputFile.nextDouble();            numAccts++;        }        return numAccts;    }    public static int findAcct(Scanner inputFile, PrintWriter outputFile, int[] acctNum, int numAccts, int account) {        account = inputFile.nextInt();        if (account != -1) {            for (int n = 0; n <= numAccts; n++) {                if (account == acctNum[n])                    ;                account = acctNum[n];            }        } else            outputFile.printf(&quot;\n %1s Error; requested account does not exist. &quot;);        return account;    }    public static void withdrawal(Scanner inputFile, PrintWriter outputFile, int[] acctNum, double[] balance,            int numAccts) {        int account = -1;        double wd = -1.0;        account = findAcct(inputFile, outputFile, acctNum, numAccts, account);        boolean acct_vld;        if (account != -1)            acct_vld = true;        if (acct_vld = true) {            outputFile.printf(                    &quot;%1d Withdrawing money from account ID: \n%1d Current balance: \n %1d Enter amount to withdraw: &quot;,                    acctNum[account], balance[account], wd);            wd = inputFile.nextDouble();            if (balance[account] < wd)                outputFile.printf(&quot;\n %1s Invalid withdraw ammount: Amount cannot exceed balance. &quot;);            if (wd < 0)                outputFile.printf(&quot;\n %1s Invalid withdraw ammount: Cannot withdraw negative dollars. &quot;);            else {                balance[account] -= wd;                outputFile.print(&quot;\n%1s Successfully withdrew $&quot; + wd + &quot; from account &quot; + account);            }        }    }    public static void deposit(Scanner inputFile, PrintWriter outputFile, int[] acctNum, double[] balance,            int numAccts) {        int account = -1;        double dp = 0;        account = findAcct(inputFile, outputFile, acctNum, numAccts, account);        boolean acct_vld;        if (account != -1)            acct_vld = true;        else            acct_vld = false;        if (acct_vld = true) {            outputFile.printf(                    &quot;%1d Depositing money into account ID: \n%1d Current balance: \n %1d Enter amount to deposit: &quot;,                    acctNum[account], balance[account], dp);            dp = inputFile.nextDouble();            if (dp < 0 || dp == 0)                outputFile.printf(&quot;\n %1s Invalid withdraw ammount: Cannot withdraw negative/zero dollars. &quot;);            else {                balance[account] += dp;            }            outputFile.print(&quot;\n%1s Successfully deposited $&quot; + dp + &quot; Into account &quot; + account + &quot;. new balance is: &quot;                    + balance[account] + &quot;.&quot;);        }    }    public static int newAcct(Scanner testCases, PrintWriter outputFile, int[] acctNum, double[] balance,            int numAccts) {        int account = -1;        boolean exist;        outputFile.printf(&quot;Creating New account. \n Please enter account number.&quot;);        for (int n = 0; n <= numAccts; n++) {            if (account == acctNum[n])                ;            exist = true;        }        if (exist = true) {            outputFile.printf(&quot;\nChoose new ID. Account already exists.&quot;);            return account;        } else {            acctNum[account] = testCases.nextInt();            balance[account] = testCases.nextDouble();            outputFile.printf(&quot;\n Account successfully created. Account number is: %1d Current Balance is %1.2d&quot;,                    acctNum[account], balance[account]);            return account;        }    }    public static void balance(Scanner inputFile, PrintWriter outputFile, int[] acctNum, double[] balance,            int numAccts) {        int account = -1;        account = findAcct(inputFile, outputFile, acctNum, numAccts, account);        for (int n = 0; n <= numAccts; n++) {            if (account == acctNum[n]) {                account = acctNum[n];                outputFile.printf(&quot;%1d&quot;, balance[n]);            } else                outputFile.printf(&quot;%1s Error; requested account does not exist&quot;);        }    }    public static void menu() {        System.out.println(&quot;Please make a selection.&quot;);        System.out.println(&quot;W - Withdraw&quot;);        System.out.println(&quot;D - Deposit&quot;);        System.out.println(&quot;B - Check Balance&quot;);        System.out.println(&quot;N - Make New Account&quot;);        System.out.println(&quot;Q - Quit&quot;);    }    public static void main(String[] args) throws IOException {        // TODO Auto-generated method stub        PrintWriter outputFile;        outputFile = new PrintWriter(&quot;hw_7_out.txt&quot;);        File myinputFile = new File(&quot;C:\\Users\\chroZ\\eclipse-workspace\\Topic_7\\src\\hw7input.txt&quot;);        Scanner inputFile = new Scanner(myinputFile);        File mytestcases = new File(&quot;C:\\Users\\chroZ\\eclipse-workspace\\Topic_7\\src\\hw7testcases.txt&quot;);        Scanner testCases = new Scanner(mytestcases);        char slct;        final int max_acct = 50;        int notDone = 20;        double[] balance;        balance = new double[max_acct];        int[] acctNum;        acctNum = new int[max_acct];        int numAccts;        numAccts = readAccts(inputFile, outputFile, acctNum, balance);        // create a loop that calls the menu method and calls the selected action method        do {            menu();            String choice = testCases.next();            slct = choice.charAt(0);            switch (slct) {            // tell switch statement which method to call depending on the user's input            case 'W', 'w': withdrawal(inputFile, outputFile, acctNum, balance, numAccts);                break;            case 'D', 'd': deposit(inputFile, outputFile, acctNum, balance, numAccts);                break;            case 'B', 'b': balance(inputFile, outputFile, acctNum, balance, numAccts);                break;            case 'N', 'n': newAcct(inputFile, outputFile, acctNum, balance, numAccts);                break;            // declare notDone as the numerical value for F if user wants to quit            case 'Q', 'q':                notDone = 6;                break;            // prints an error if the input is anything other than the availible selections            default:                outputFile.printf(&quot;\n%1s&quot;, &quot;Error; Invalid selection.&quot;);            }        } while (notDone == 20);        printAcct(inputFile, outputFile, acctNum, balance, numAccts);        outputFile.printf(&quot;In total, there are &quot; + numAccts + &quot; accounts.&quot;);        outputFile.flush();        inputFile.close();        outputFile.close();        testCases.close();    }}