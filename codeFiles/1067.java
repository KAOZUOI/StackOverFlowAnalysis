import java.util.ArrayList;import java.util.List;import java.util.Random;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.Executors;public class X {    public static void main(String[] args) throws InterruptedException {        System.out.println(&quot;Hello World&quot;);        var mainMap = new ConcurrentHashMap<Integer, String>();        Random rnd = new Random();        //I don't know from the beginning how many objects        for (int i = 0; i < rnd.nextInt(100); i++) {            mainMap.put(i, &quot;elem &quot; + i);        }        List<Thread> threads = new ArrayList<>();        mainMap.forEach(1, (k, v) -> {            //this modelize a sub-task my application executes asynchronously            Thread t = new Thread(() -> {                System.out.println(&quot;Object &quot; + k + &quot; started working <&quot; + v + &quot;>&quot;);                try {                    Thread.sleep(k * 500);                } catch (InterruptedException e1) {                    // TODO Auto-generated catch block                    e1.printStackTrace();                }                System.out.println(&quot;Object &quot; + k + &quot; done after &quot; + (k * 500) + &quot; ms&quot;);            });            threads.add(t);            t.start();        });        Executors.newSingleThreadExecutor().submit(() -> {            for (Thread t : threads) {                try {                    t.join();                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }            System.out.println(&quot;All job done !&quot;);        });        System.out.println(&quot;Main thread not blocked&quot;);    }}