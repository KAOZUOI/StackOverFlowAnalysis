import java.util.Random;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;public class X {    public static void main(String[] args) throws InterruptedException {        System.out.println(&quot;Hello World&quot;);        var mainMap = new ConcurrentHashMap<Integer, String>();        Random rnd = new Random();        //I don't know from the beginning how many objects        for (int i = 0; i < rnd.nextInt(100); i++) {            mainMap.put(i, &quot;elem &quot; + i);        }        ExecutorService executor = Executors.newFixedThreadPool(10);        mainMap.forEach(1, (k, v) -> {            executor.execute(() -> {                System.out.println(&quot;Object &quot; + k + &quot; started working <&quot; + v + &quot;>&quot;);                try {                    Thread.sleep(k * 500);                } catch (InterruptedException e1) {                    e1.printStackTrace();                }                System.out.println(&quot;Object &quot; + k + &quot; done after &quot; + (k * 500) + &quot; ms&quot;);            });        });        Executors.newSingleThreadExecutor().submit(() -> {            try {                executor.shutdown();                executor.awaitTermination(1, TimeUnit.MINUTES);            } catch (InterruptedException e) {                throw new RuntimeException(e);            }            System.out.println(&quot;All job done !&quot;);        });        System.out.println(&quot;Main thread not blocked&quot;);    }}