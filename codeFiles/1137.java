package com.rom.service;import com.mongodb.BasicDBObject;import freemarker.cache.ClassTemplateLoader;import freemarker.template.TemplateExceptionHandler;import org.springframework.beans.factory.annotation.Autowired;import javax.mail.*;import javax.mail.internet.InternetAddress;import javax.mail.internet.MimeMessage;import java.util.Properties;import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;import freemarker.template.Configuration;public class SendEmailSSL {    private String hostUrl = &quot;http://localhost:9000&quot;;    private String emailFrom= &quot;ra*******@gmail.com&quot;;    private String emailCompany = &quot;raxxx&quot;;    //@Autowired    //private Configuration fmConfiguration;    public SendEmailSSL() {    }    public void sendEmail(String template, BasicDBObject model) throws Exception{        final String username = &quot;ra****@gmail.com&quot;;        final String password = &quot;R*******!&quot;;        Properties prop = new Properties();        prop.put(&quot;mail.host&quot;, &quot;smtp.gmail.com&quot;);        prop.put(&quot;mail.port&quot;, &quot;587&quot;);        prop.put(&quot;mail.transport.protocol&quot;, &quot;true&quot;);        prop.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);        prop.put(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;);        prop.put(&quot;mail.smtp.socketFactory.port&quot;, &quot;465&quot;);        prop.put(&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;);        Session session = Session.getInstance(prop,                new javax.mail.Authenticator() {                    protected PasswordAuthentication getPasswordAuthentication() {                        return new PasswordAuthentication(username, password);                    }                });        try {            String subject = &quot;Welcome&quot;;            switch (template) {                case &quot;register&quot;:                    subject = &quot;Welcome to xxx&quot;;                    break;                case &quot;forgot&quot;:                    subject = &quot;We have reset your password&quot;;                    break;            }            Message mimeMessage = new MimeMessage(session);            mimeMessage.setFrom(new InternetAddress(emailFrom, emailCompany));            mimeMessage.setRecipients(                    Message.RecipientType.TO,                    InternetAddress.parse((String) model.get(&quot;email&quot;))            );            mimeMessage.setSubject(subject);            //image path            model.put(&quot;imgPath&quot;, hostUrl + &quot;/emails/_&quot;+template+&quot;/images/&quot;);            mimeMessage.setContent(geContentFromTemplate(template, model),&quot;text/html&quot;);            Transport.send(mimeMessage);        } catch (MessagingException e) {            e.printStackTrace();        }    }    public String geContentFromTemplate(String template, BasicDBObject model) {        StringBuffer content = new StringBuffer();        Configuration fmConfiguration = new Configuration(Configuration.VERSION_2_3_23);        ClassTemplateLoader loader = new ClassTemplateLoader(                new Configuration(Configuration.VERSION_2_3_23).getClass(), &quot;/templates&quot;);        fmConfiguration.setTemplateLoader(loader);        fmConfiguration.setDefaultEncoding(&quot;UTF-8&quot;);        fmConfiguration.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);        try {            content.append(FreeMarkerTemplateUtils                    .processTemplateIntoString(fmConfiguration.getTemplate(  template +&quot;-template.html&quot;), model));        } catch (Exception e) {            e.printStackTrace();        }        return content.toString();    }}