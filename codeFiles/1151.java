  @GetMapping(&quot;/foo/request&quot;)  @Timed(value = &quot;foo.request&quot;)  fun fooRequest(fooRequest: FooRequest): Mono<String> {    return performAction(fooRequest)      .flatMap { fooResponse ->        Mono.fromCallable {          &quot;FooResponse: $fooResponse&quot;        }      }      .doOnNext { logger.debug(&quot;response {}&quot;, it) }  }  fun performAction(fooRequest: FooRequest): Mono<FooResponse> {    return Mono.just(fooRequest))      .flatMap { request ->        fooService.handleRequest(request)      }      .doOnNext { response ->        //some operations here        logger.debug(response)      }.subscribeOn(Schedulers.boundedElastic())  }