package com.microservices.registration.config;import com.microservices.registration.model.RegistrationUser;import org.apache.kafka.clients.consumer.ConsumerConfig;import org.apache.kafka.clients.producer.ProducerConfig;import org.apache.kafka.common.serialization.StringDeserializer;import org.apache.kafka.common.serialization.StringSerializer;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.mongodb.config.AbstractMongoClientConfiguration;import org.springframework.kafka.annotation.EnableKafka;import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;import org.springframework.kafka.core.*;import org.springframework.kafka.support.converter.StringJsonMessageConverter;import org.springframework.kafka.support.serializer.JsonDeserializer;import org.springframework.kafka.support.serializer.JsonSerializer;import java.util.HashMap;import java.util.Map;@Configuration@EnableKafkapublic class KafkaConfig extends AbstractMongoClientConfiguration {    @Value(&quot;${spring.kafka.bootstrap-servers}&quot;)    private String bootstrapServers;    @Bean    public ProducerFactory<String, RegistrationUser> producerFactory() {        Map<String, Object> config = new HashMap<>();        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);        return new DefaultKafkaProducerFactory<>(config);    }    @Bean    public ConsumerFactory<String, RegistrationUser> consumerFactory() {        Map<String, Object> props = new HashMap<>();        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);        props.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;registrationGroup&quot;);        return new DefaultKafkaConsumerFactory<>(props, new StringDeserializer(),                new JsonDeserializer<>(RegistrationUser.class));    }    @Bean    public KafkaTemplate<String, RegistrationUser> kafkaTemplate() {        return new KafkaTemplate<>(producerFactory());    }    @Bean    public ConcurrentKafkaListenerContainerFactory<String, RegistrationUser> kafkaListenerContainerFactory() {        ConcurrentKafkaListenerContainerFactory<String, RegistrationUser> factory = new ConcurrentKafkaListenerContainerFactory<>();        factory.setConsumerFactory(consumerFactory());        factory.setMessageConverter(new StringJsonMessageConverter());        return factory;    }    @Override //override this method to set the name of the database    protected String getDatabaseName() {        return &quot;registration&quot;;    }}