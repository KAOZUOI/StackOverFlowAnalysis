import org.objectweb.asm.*;import javax.tools.JavaCompiler;import javax.tools.JavaFileObject;import javax.tools.StandardJavaFileManager;import javax.tools.ToolProvider;import java.io.File;import java.io.IOException;import java.lang.reflect.Method;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.*;import java.util.stream.Collectors;public class ASMVisitor {    static class SimpleMethodVisitor extends MethodVisitor {        public String currMethodName;        public List<String[]> constants = new ArrayList<>();        private final Map<Object, Integer> constantFrequencyMap;        public SimpleMethodVisitor(int api, MethodVisitor methodVisitor, String methodName) {            super(Opcodes.ASM9, methodVisitor);            currMethodName = methodName;            constantFrequencyMap = new HashMap<>();        }        @Override        public void visitMethodInsn(int opcode, java.lang.String owner, java.lang.String name, java.lang.String descriptor, boolean isInterface) {//            System.out.println(Opcodes.LDC);//            System.out.println(&quot;Visited method instruction: &quot; + opcode + &quot;, &quot; + owner + &quot;, &quot; + name + &quot;, &quot; + descriptor + &quot;, &quot; + isInterface);            super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);        }        public Map<Object, Integer> getConstantFrequencyMap() {            return constantFrequencyMap;        }        @Override        public void visitLdcInsn(Object cst) {//            System.out.println(&quot;Method &quot; + this.currMethodName + &quot; contains ldc instruction: &quot; + cst);            super.visitLdcInsn(cst);        }        @Override        public void visitInsn(int opcode) {            System.out.println(&quot;Method &quot; + this.currMethodName + &quot; contains instruction: &quot; + opcode);            super.visitInsn(opcode);        }        @Override        public void visitFieldInsn(int opcode, String owner, String name, String descriptor) {            System.out.printf(&quot;FieldInsn: opcode = %s, Owner = %s, Name = %s, Descriptor = %s\n&quot;,                    opcode, owner, name, descriptor);            constants.add(new String[]{owner, name, descriptor});        }    }    static class SimpleClassVisitor extends ClassVisitor {        public String currClassName;        public Map<String[],Object> constants;        public Set<MethodVisitor> mvs = new HashSet<>();        public SimpleClassVisitor() {            super(Opcodes.ASM9);            currClassName = &quot;&quot;;            this.constants = new HashMap<>();        }        @Override        public void visit(int version, int acc, String name,                                    String sig, String superName, String[] ifs) {            currClassName = name;            super.visit(version, acc, name, sig, superName, ifs);        }        @Override        public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {            System.out.printf(&quot;visitField: Name = %s, Desc = %s, Signature = %s, Value = %s\n&quot;,                    name, desc, signature, value);            if (value != null && (access & Opcodes.ACC_STATIC) != 0) {                constants.put(new String[]{currClassName, name, desc}, value);            }            return super.visitField(access, name, desc, signature, value);        }        @Override        public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {//            System.out.printf(&quot;visitMethod: Name = %s, Desc = %s, Signature = %s\n&quot;, name, desc, signature);            MethodVisitor methodvisitor = super.visitMethod(access, name, desc, signature, exceptions);            MethodVisitor mv = new SimpleMethodVisitor(Opcodes.ASM9, methodvisitor, name);            mvs.add(mv);            return mv;        }    }    public static void main(String[] args) throws IOException {            ...            try {                byte[] bytes = Files.readAllBytes(file);                ClassReader classReader = new ClassReader(bytes);                SimpleClassVisitor scv = new SimpleClassVisitor();                classReader.accept(scv, ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG);            } catch (IOException e) {                e.printStackTrace();            }        });    }}