@Configuration@EnableRedisRepositoriespublic class RedisConfiguration {    private final String redisHost;    private final int redisPort;    private final String connectionPoolMaxTotal;    private final String connectionPoolIdleTotal;    @Resource(name = &quot;eventStreamRedisCredentialProvider&quot;)    private CredentialProvider credentialProvider;    private static final Logger LOGGER = LoggerFactory.getLogger(RedisConfiguration.class);    public RedisConfiguration(RedisProperties redisProperties){        redisHost = redisProperties.getRedisHost();        redisPort = redisProperties.getRedisPort();        connectionPoolMaxTotal = redisProperties.getConnectionPoolMaxTotal();        connectionPoolIdleTotal = redisProperties.getConnectionPoolIdleTotal();    }    @Bean    JedisConnectionFactory jedisConnectionFactory() throws RedisConnectionFailureException{        JedisConnectionFactory jedisConnectionFactory = null;        try {            RedisStandaloneConfiguration redisStandaloneConfiguration = new RedisStandaloneConfiguration();            redisStandaloneConfiguration.setPassword(credentialProvider.getCredential().getPassword());            redisStandaloneConfiguration.setDatabase(0);            redisStandaloneConfiguration.setHostName(redisHost);            redisStandaloneConfiguration.setPort(redisPort);            jedisConnectionFactory = new JedisConnectionFactory(redisStandaloneConfiguration);            jedisConnectionFactory.getPoolConfig().setMaxTotal(Integer.parseInt(connectionPoolMaxTotal));            jedisConnectionFactory.getPoolConfig().setMaxIdle(Integer.parseInt(connectionPoolIdleTotal));        } catch (RedisConnectionFailureException e) {            LOGGER.error(&quot;Unable to establish connection with redis&quot;);            throw new RedisConnectionFailureException(&quot;Unable to establish connection with redis&quot;);        }        return jedisConnectionFactory;    }    @Bean    @ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)    public RedisTemplate<String, Object> redisTemplate() {        final RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();        template.setConnectionFactory(jedisConnectionFactory());        template.setValueSerializer(new GenericToStringSerializer<Object>(Object.class));        template.setEnableTransactionSupport(true);        return template;    }}