@Resourcepublic class EventsDataSourceProvider {    public List<String> getAuthenticationTypeEvents(){        return this.getEventsFromFile(&quot;events_auth.txt&quot;);    }    public List<String> getAuthenticationTypeInvalidEvents(){ return this.getEventsFromFile(&quot;events_auth_invalid.txt&quot;); }    public List<String> getAllTypesEvents(){        return this.getEventsFromFile(&quot;events.txt&quot;);    }    public List<String> getDocumentsTypesEvents(){        return this.getEventsFromFile(&quot;events_documents.txt&quot;);    }    public List<String> getCorrespondenceTypesEvents(){        return this.getEventsFromFile(&quot;events_correspondence.txt&quot;);    }    public List<String> getProjectsTypesEvents(){        return this.getEventsFromFile(&quot;events_projects.txt&quot;);    }    private List<String> getEventsFromFile(String inputFile){        ClassLoader classLoader = getClass().getClassLoader();        File file = new File(classLoader.getResource(inputFile).getFile());        List<String> events = new ArrayList<>();        try (BufferedReader eventBufferedReader = Files.newBufferedReader(Paths.get(file.toURI()))) {            events = eventBufferedReader.lines().collect(Collectors.toList());        } catch (IOException e) {            e.printStackTrace();        }        return events;    }}