public class PaintBucketCSMinesSolution {    public static void main(String[] args) throws IOException {        // maintain distinct list of points that have been visited        Set<int[]> exploredSet = new TreeSet<>(                Comparator.comparingInt((int[] el) -> el[1]).thenComparingInt(el -> el[0]));        int W;        int H;        int X;        int Y;        int[][] picture;        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));        StringTokenizer st = new StringTokenizer(r.readLine());        W = Integer.parseInt(st.nextToken());        H = Integer.parseInt(st.nextToken());        X = Integer.parseInt(st.nextToken());        Y = Integer.parseInt(st.nextToken());        picture = new int[H][W];        for (int i = 0; i < H; i++) {            st = new StringTokenizer(r.readLine());            for (int j = 0; j < W; j++) {                picture[i][j] = Integer.parseInt(st.nextToken());            }        }        int color = picture[Y][X];        Stack<int[]> toExploreStack = new Stack<>();        toExploreStack.add(new int[] { X, Y });        while (!toExploreStack.isEmpty()) {            int[] point = toExploreStack.pop();            int px = point[0];            int py = point[1];            // System.out.println(exploredSet.contains(point));            boolean execute = true;            if (exploredSet.contains(point)) {                execute = false;            }            if (execute) {                exploredSet.add(point);                if (px > 0 && picture[py][px - 1] == color) {                    toExploreStack.add(new int[] { px - 1, py });                }                if (px < (W - 1) && picture[py][px + 1] == color) {                    toExploreStack.add(new int[] { px + 1, py });                }                if (py > 0 && picture[py - 1][px] == color) {                    toExploreStack.add(new int[] { px, py - 1 });                }                if (py < (H - 1) && picture[py + 1][px] == color) {                    toExploreStack.add(new int[] { px, py + 1 });                }            }        }        // exploredSet.sort(Comparator.comparingInt((int[] el) ->        // el[1]).thenComparingInt(el -> el[0]));        // Sorting HashSet using List        for (int[] v : exploredSet) {            System.out.println(v[0] + &quot; &quot; + v[1]);        }    }}