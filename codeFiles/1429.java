    @Bean    public ClientHttpConnector getClientHttpConnector() {        return new ReactorClientHttpConnector(HttpClient.create().wiretap(true).metrics(true, Function.identity()).protocol(HttpProtocol.HTTP11).secure(sslContextSpec -> sslContextSpec.sslContext(getSslContext()).handshakeTimeout(Duration.ofSeconds(59))));    }    @Bean    @Primary    public WebClient getWebClient(final ClientHttpConnector clientHttpConnector) {        return WebClient.builder().baseUrl(hostAndPort).defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).clientConnector(clientHttpConnector).build();    }public SslContext getSslContext() {        try {            final var keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());            try (InputStream file = new FileInputStream(&quot;/path/to/keystore&quot;)) {                final var keyStore = KeyStore.getInstance(&quot;PKCS12&quot;);                keyStore.load(file, &quot;password&quot;.toCharArray());                keyManagerFactory.init(keyStore, &quot;password&quot;.toCharArray());            }            return SslContextBuilder.forClient().keyManager(keyManagerFactory).trustManager(InsecureTrustManagerFactory.INSTANCE).build();        } catch (final Exception e) {            e.printStackTrace();            return null;        }    }