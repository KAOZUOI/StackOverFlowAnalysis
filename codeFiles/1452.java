public class CustomCorsProcessor extends DefaultCorsProcessor implements CorsProcessor {    private static final String ACCESS_CONTROL_REQUEST_PRIVATE_NETWORK = &quot;Access-Control-Request-Private-Network&quot;;    private static final String ACCESS_CONTROL_ALLOW_PRIVATE_NETWORK = &quot;Access-Control-Allow-Private-Network&quot;;        @Override    public boolean processRequest(@Nullable CorsConfiguration config, HttpServletRequest request,            HttpServletResponse response) throws IOException {                //Allow DefaultCorsProcessor to run first        boolean superResult = super.processRequest(config, request, response);        if (superResult == false) return false;                ServerHttpRequest serverRequest = new ServletServerHttpRequest(request);                //If the CORS header requesting Private Network access is present, respond allowing access        if(serverRequest.getHeaders().containsKey(ACCESS_CONTROL_REQUEST_PRIVATE_NETWORK)) {            response.addHeader(ACCESS_CONTROL_ALLOW_PRIVATE_NETWORK, Boolean.toString(true));        }                return true;    }}