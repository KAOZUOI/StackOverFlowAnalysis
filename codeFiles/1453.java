@Configuration@EnableWebSecuritypublic class WebSecurityConfig {    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http            // by default uses a Bean by the name of corsFilter            .cors()            .and()            ... as needed for your application        return http.build();    }    public CorsConfigurationSource corsConfigurationSource() {        CorsConfiguration configuration = new CorsConfiguration();        configuration.setAllowCredentials(true);        configuration.addAllowedOrigin(&quot;http://domain1.com&quot;);        configuration.addAllowedHeader(&quot;*&quot;);        configuration.addAllowedMethod(&quot;*&quot;);        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration(&quot;/**&quot;, configuration);        return source;    }        @Bean    public CorsFilter corsFilter() {        CorsConfigurationSource corsConfigurationSource = corsConfigurationSource();        CorsFilter corsFilter = new CorsFilter(corsConfigurationSource);        //Register our custom CorsProcessor that includes the Private Network allowed header        corsFilter.setCorsProcessor(new CustomCorsProcessor());        return corsFilter;    }}