CriteriaBuilder cb = entityManager.getCriteriaBuilder();    CriteriaQuery<RegistryGroupRow> c = cb.createQuery(RegistryGroupRow.class);    Root<RegistryGroupEntity> registryGroup = c.from(RegistryGroupEntity.class);    Join<RegistryGroupEntity, ServiceEntity> serviceJoin = registryGroup.join(RegistryGroupEntity_.services, JoinType.INNER);    c.multiselect(registryGroup.get(RegistryGroupEntity_.id),            registryGroup.get(RegistryGroupEntity_.name),            cb.function(&quot;group_concat&quot;, String.class, serviceJoin.get(ServiceEntity_.name), cb.literal(true),                    cb.literal(&quot;, &quot;), serviceJoin.get(ServiceEntity_.name),                    cb.literal(&quot;DESC&quot;)).alias(&quot;name&quot;));    c.where().groupBy(registryGroup.get(RegistryGroupEntity_.name));    c.orderBy(cb.desc(registryGroup.get(RegistryGroupEntity_.id)));    List<Predicate> criteria = getRegistryGroupPredicates(cb, registryGroup, filter, c);    if (criteria.size() == 1) {        c.where(criteria.get(0));    } else if (criteria.size() > 0) {        c.where(cb.and(criteria.toArray(new Predicate[0])));    }    TypedQuery<RegistryGroupRow> q = entityManager.createQuery(c);    Map<String, Object> paramValues = getRegistryGroupParamValues(filter);    for (String name : paramValues.keySet()) {        q.setParameter(name, paramValues.get(name));    }    if (offset != null) {        q.setFirstResult(offset);    }    if (limit != null) {        q.setMaxResults(limit);    }    return q.getResultList();@Entity@Table(name = &quot;registry_groups&quot;)public class RegistryGroupEntity {    @Id    @SequenceGenerator(name=&quot;registry_groups_gen&quot;, sequenceName=&quot;registry_groups_id_seq&quot;, allocationSize = 1)    @GeneratedValue(generator=&quot;registry_groups_gen&quot;)    private Integer id;    @Column(name = &quot;name&quot;)    private String name;    @OneToMany(mappedBy = &quot;registryGroup&quot;)    private Collection<ServiceEntity> services;//setters-getters ommited}@Entity@Table(name = &quot;services&quot;)public class ServiceEntity {    @Id    @SequenceGenerator(name=&quot;service_gen&quot;, sequenceName=&quot;services_id_seq&quot;, allocationSize = 1)    @GeneratedValue(generator=&quot;service_gen&quot;)    private Integer id;    @Column(nullable = false, length = 100)    private String name;    @Column(name = &quot;registry_group_id&quot;, insertable = false, updatable = false)    private Integer registryGroupId;}