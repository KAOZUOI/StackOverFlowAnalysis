 private final CorsCustomizer corsCustomizer;private final UserService userService;private final ClientService clientService;@Beanpublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {    OAuth2AuthorizationServerConfigurer configurer = new OAuth2AuthorizationServerConfigurer();    http.apply(configurer);    configurer.registeredClientRepository(clientService);    corsCustomizer.customize(http);    return http.formLogin()            .and()            .authorizeHttpRequests()            .requestMatchers(&quot;/users/**&quot;).permitAll()            .requestMatchers(&quot;/clients/**&quot;).permitAll()            .requestMatchers(&quot;/swagger-ui/**&quot;, &quot;/v3/api-docs/**&quot;, &quot;/**&quot;).permitAll()            .anyRequest().authenticated()            .and()            .csrf().ignoringRequestMatchers(&quot;/users/**&quot;, &quot;/clients/**&quot;)            .and().build();}@Beanpublic AuthenticationManager authenticationManagerBean() throws Exception {    var provider = new DaoAuthenticationProvider();    provider.setUserDetailsService(userService);    provider.setPasswordEncoder(passwordEncoder());    return new ProviderManager(provider);}@Beanpublic PasswordEncoder passwordEncoder(){    return NoOpPasswordEncoder.getInstance();}