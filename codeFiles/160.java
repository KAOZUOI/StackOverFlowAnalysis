private final ClientRepository clientRepository;@Overridepublic void save(RegisteredClient registeredClient) {}@Overridepublic RegisteredClient findById(String id) {    Client client = clientRepository.findById(id).orElseThrow();    return toRegisteredClient(client);}@Overridepublic RegisteredClient findByClientId(String clientId) {    return findById(clientId);}public ClientDto createClient(CreateClientRequest request) {    var client = new Client(request);    var scopes = request.getScopes().stream().map(ClientScope::new).collect(Collectors.toSet());    client.setScopes(scopes);    client.setClientRedirectUrls(request.getRedirectUris().stream()            .map(url -> new ClientRedirectUrl(url, client))            .collect(Collectors.toSet()));    clientRepository.save(client);    return new ClientDto(client);}public RegisteredClient toRegisteredClient(Client client) {    RegisteredClient.Builder builder = RegisteredClient.withId(client.getId())            .clientId(client.getId())            .clientSecret(client.getSecret())            .clientAuthenticationMethod(client.getAuthenticationMethod())            .authorizationGrantTypes(                    authorizationGrantTypes -> authorizationGrantTypes.addAll(client.getGrantTypes()))            .redirectUris(                    redirectUris -> redirectUris.addAll(client.getClientRedirectUrls()                            .stream()                            .map(ClientRedirectUrl::getUrl)                            .collect(Collectors.toSet())))            .scopes(scopes -> scopes.addAll(client.getScopes()                    .stream()                    .map(ClientScope::getScope)                    .collect(Collectors.toSet())));    return builder.build();}