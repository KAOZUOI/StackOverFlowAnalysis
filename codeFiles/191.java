package com.portfolio.todoapp.asoviewtodo.Config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import java.util.List;@Configuration@EnableWebSecuritypublic class WebSecurityConfig {    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http.authorizeRequests().antMatchers(&quot;/signup&quot;).permitAll().anyRequest().authenticated().and().csrf().                disable().cors();        http.formLogin(login -> login.loginPage(&quot;http://localhost:3000/login&quot;).loginProcessingUrl(&quot;/login&quot;).                defaultSuccessUrl(&quot;http://localhost:3000/&quot;).failureUrl(&quot;/login/error&quot;).permitAll()).                logout(logout -> logout.logoutUrl(&quot;http://localhost:3000/login&quot;));         return http.build();    }    @Bean    public CorsConfigurationSource corsConfigurationSource() {        final CorsConfiguration configuration = new CorsConfiguration();        configuration.setAllowedOrigins(List.of(&quot;http://localhost:3000&quot;));        configuration.setAllowedMethods(List.of(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;PUT&quot;, &quot;OPTIONS&quot;, &quot;PATCH&quot;, &quot;DELETE&quot;));        configuration.setAllowedHeaders(List.of(&quot;Authorization&quot;, &quot;Cache-Control&quot;, &quot;Content-Type&quot;, &quot;Access-Control-Allow-Origin&quot;));        configuration.setAllowCredentials(true);        configuration.setExposedHeaders(List.of(&quot;Authorization&quot;, &quot;Access-Control-Allow-Origin&quot;));        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration(&quot;/**&quot;, configuration);        return source;    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }}