import com.example.noName.security.JwtAuthenticationEntryPoint;import com.example.noName.security.JwtAuthenticationFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecuritypublic class SecurityConfig {    private static final String[] AUTH_WHITE_LIST = {            &quot;/v3/api-docs/**&quot;,            &quot;/swagger-ui/**&quot;,            &quot;/v2/api-docs/**&quot;,            &quot;/swagger-resources/**&quot;,            &quot;/h2-console/**&quot;,            &quot;/console/**&quot;,            &quot;/account/**&quot;    };    @Autowired    private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;    @Bean    public JwtAuthenticationFilter jwtAuthenticationFilter() {        return new JwtAuthenticationFilter();    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Bean    public AuthenticationManager authenticationManager(            AuthenticationConfiguration authConfig) throws Exception {        return authConfig.getAuthenticationManager();    }    @Bean    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {        http                .cors()                .and()                .csrf()                .disable()                .exceptionHandling()                .authenticationEntryPoint(jwtAuthenticationEntryPoint)                .and()                .sessionManagement()                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)                .and()                .authorizeHttpRequests()                .requestMatchers(AUTH_WHITE_LIST)                .permitAll()                .and()                .headers()                .frameOptions()                .disable()                .and()                .authorizeHttpRequests()                .anyRequest()                .authenticated()                .and()                .httpBasic()                .and()                .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)                .httpBasic();        return http.build();    }}