@Configuration@EnableWebSecuritypublic class SecurityConfiguration {@Value(&quot;${credentials.username}&quot;)private String username;@Value(&quot;${credentials.password}&quot;)private String password;@Value(&quot;${credentials.role}&quot;)private String role;private final AuthClient authClient;public DashboardSecurityConfiguration(AuthClient authClient) {    this.authClient = authClient;}@Beanpublic PasswordEncoder passwordEncoder() {    return new BCryptPasswordEncoder();}@Bean@Order(1)public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {    httpSecurity.antMatcher(&quot;/secure_endpoint/**&quot;)            .authorizeHttpRequests(authorize -> authorize                    .antMatchers(HttpMethod.OPTIONS).permitAll()                    .anyRequest().hasRole(role)            )            .authenticationProvider(new SsoAuthenticationProvider(authClient))            .addFilterBefore(new SsoTokenFilter(), UsernamePasswordAuthenticationFilter.class)            .httpBasic();    return httpSecurity.build();}@Bean@Orderpublic SecurityFilterChain defaultSecurityFilterChain(HttpSecurity httpSecurity) throws Exception {    httpSecurity.authorizeHttpRequests(authorize -> authorize                    .anyRequest().permitAll())            .headers().disable()            .csrf().disable();    return httpSecurity.build();}@Beanpublic UserDetailsService userDetailsManager() {    return new InMemoryUserDetailsManager(List.of(            createUser(username, password, role)    ));}private UserDetails createUser(String username, String password, String... roles) {    return User.builder()            .username(username)            .password(passwordEncoder().encode(password))            .roles(roles)            .build();}