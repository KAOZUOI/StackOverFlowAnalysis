@Configuration@EnableWebFluxSecuritypublic class SecurityConfig {    @Bean    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {        return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());    }    @Bean    @ConditionalOnMissingBean(HttpSessionManager.class)    protected HttpSessionManager httpSessionManager() {        return new HttpSessionManager();    }    @Bean    public ServletListenerRegistrationBean<HttpSessionEventPublisher> httpSessionEventPublisher() {        return new ServletListenerRegistrationBean<HttpSessionEventPublisher>(new HttpSessionEventPublisher());    }    @Bean    public ServerLogoutSuccessHandler keycloakLogoutSuccessHandler(ReactiveClientRegistrationRepository repository) {        OidcClientInitiatedServerLogoutSuccessHandler successHandler = new OidcClientInitiatedServerLogoutSuccessHandler(repository);        successHandler.setPostLogoutRedirectUri(&quot;http://localhost:9000/app/logout&quot;);        return successHandler;    }    private ServerLogoutHandler logoutHandler() {        return new DelegatingServerLogoutHandler(new WebSessionServerLogoutHandler(), new SecurityContextServerLogoutHandler());    }    @Bean    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http, ServerLogoutSuccessHandler handler) {        // Authenticate through configured OpenID Provider        http.authorizeExchange()                .pathMatchers(&quot;/app/logout&quot;).permitAll()                .pathMatchers(&quot;/app/&quot;).authenticated().and().cors().and().oauth2Login();        // Also logout at the OpenID Connect provider        http.logout(logout -> logout.logoutHandler(logoutHandler()).logoutSuccessHandler(handler));        // Require authentication for all requests        http.authorizeExchange().anyExchange().authenticated();        // Allow showing /home within a frame        http.headers().frameOptions().mode(XFrameOptionsServerHttpHeadersWriter.Mode.SAMEORIGIN);        // Disable CSRF in the gateway to prevent conflicts with proxied service CSRF        http.csrf().disable();        return http.build();    }}