@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)public class AuthConfig extends WebSecurityConfigurerAdapter {    private static final String API_KEY_HEADER_NAME = &quot;API_KEY&quot;;    private static final String TIMESTAMP_HEADER_NAME = &quot;timestamp&quot;;    private static final String SIGNATURE_HEADER_NAME = &quot;signature&quot;;    @Autowired    private SimpleAuthenticationManager simpleAuthenticationManager;    @Override    protected void configure(HttpSecurity http) throws Exception {        ApiKeyAuthFilter filter = new ApiKeyAuthFilter(API_KEY_HEADER_NAME, TIMESTAMP_HEADER_NAME, SIGNATURE_HEADER_NAME);        filter.setAuthenticationManager(simpleAuthenticationManager);        http.antMatcher(&quot;/secured/**&quot;)                .authorizeRequests()                .antMatchers(&quot;/secured/**&quot;)                .fullyAuthenticated();        http.antMatcher(&quot;/non-secured/**&quot;)                .authorizeRequests()                .antMatchers(&quot;/non-secured/**&quot;)                .permitAll();        http.antMatcher(&quot;/secured-with-api-key/**&quot;)                .addFilter(filter)                .authorizeRequests()                .antMatchers(&quot;/secured-with-api-key/**&quot;)                .authenticated();        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);        http.cors().and().csrf().disable();        http.oauth2ResourceServer().jwt();    }}