@Configuration@EnableWebFluxSecurity@EnableReactiveMethodSecuritypublic class SecurityConfig {    @Bean    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {        return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());    }    @Bean    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http,                                                            ReactiveClientRegistrationRepository clientRegistrationRepository) {        // Authenticate through configured OpenID Provider        http.authorizeExchange()                .pathMatchers(&quot;/app/**&quot;).authenticated().and().oauth2Login();        // Also logout at the OpenID Connect provider        http.logout(logout -> logout.logoutSuccessHandler(                new OidcClientInitiatedServerLogoutSuccessHandler(clientRegistrationRepository)));        // Require authentication for all requests        http.authorizeExchange().anyExchange().authenticated();        // Allow showing /home within a frame        http.headers().frameOptions().mode(XFrameOptionsServerHttpHeadersWriter.Mode.SAMEORIGIN);        // Disable CSRF in the gateway to prevent conflicts with proxied service CSRF        http.csrf().disable();        return http.build();    }}