@Beanpublic ServerSecurityContextRepository securityContextRepository() {    WebSessionServerSecurityContextRepository securityContextRepository =            new WebSessionServerSecurityContextRepository();    securityContextRepository.setSpringSecurityContextAttrName(&quot;langdope-security-context&quot;);    return securityContextRepository;}private LogoutWebFilter logoutWebFilter() {    LogoutWebFilter logoutWebFilter = new LogoutWebFilter();    SecurityContextServerLogoutHandler logoutHandler = new SecurityContextServerLogoutHandler();    logoutHandler.setSecurityContextRepository(securityContextRepository());    RedirectServerLogoutSuccessHandler logoutSuccessHandler = new RedirectServerLogoutSuccessHandler();    logoutSuccessHandler.setLogoutSuccessUrl(URI.create(&quot;http://localhost:9000/app/Default&quot;));    logoutWebFilter.setLogoutHandler(logoutHandler());    logoutWebFilter.setLogoutSuccessHandler(logoutSuccessHandler);    logoutWebFilter.setRequiresLogoutMatcher(            ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET, &quot;/app/logout&quot;)    );    return logoutWebFilter;}@Beanpublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http,ReactiveClientRegistrationRepository repository) {    // Authenticate through configured OpenID Provider    http.addFilterAfter(new CustomWebFilter(), SecurityWebFiltersOrder.LAST).authorizeExchange()            .pathMatchers(&quot;/app/logout&quot;).permitAll()            .pathMatchers(&quot;/app/authenticate&quot;).authenticated()            .pathMatchers(&quot;/app/**&quot;).authenticated().and().            logout().disable()            .securityContextRepository(securityContextRepository())            .addFilterAt(logoutWebFilter(), SecurityWebFiltersOrder.LOGOUT)            .oauth2Login(Customizer.withDefaults());    // Also logout at the OpenID Connect provider    http.httpBasic().disable();    // Require authentication for all requests   // http.authorizeExchange().anyExchange().authenticated();    // Allow showing /home within a frame    http.headers().frameOptions().mode(XFrameOptionsServerHttpHeadersWriter.Mode.SAMEORIGIN);    // Disable CSRF in the gateway to prevent conflicts with proxied service CSRF    http.csrf().disable();    return http.build();}