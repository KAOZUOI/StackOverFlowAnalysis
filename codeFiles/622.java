private final RedesOptions options = new RedesOptions()private Redis redisClient;         private void createRedisClient(Handler<AsyncResult<Redis>> handler) {                Redis.createClient(vertx, options)                        .connect(onConnect -> {                            if (onConnect.succeeded()) {                                this.redisClient = onConnect.result();                                //make sure the client is reconnected o error                                this.redisClient.exceptionHandler(e -> {                                    // attempt to reconnect                                    attemptReconnect(0);                                });                            }                            // allow further processing                            handler.handle(onConnect);                        });            }  private void attemptReconnect(int retry) {    if (retry > MAX_RECONNECT_RETRIES) {        // we should stop now, as there's nothing we can do.    } else {        System.out.println(&quot;erro de conexao >>>> &quot; );        // retry with backoff up to 10240 ms        long backoff = (long) (Math.pow(2, Math.min(retry, 10)) * 10);        vertx.setTimer(backoff, timer -> createRedisClient(onReconnect -> {            if (onReconnect.failed()) {                attemptReconnect(retry + 1);            }        }));    }}