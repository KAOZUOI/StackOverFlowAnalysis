package com.wellframe.excalibur.auth.accesscontrol;import com.wellframe.excalibur.auth.AuthenticationHolder;import com.wellframe.excalibur.auth.UserType;import com.wellframe.excalibur.services.GambitService;import java.util.List;import org.springframework.context.ApplicationContext;import org.springframework.security.access.expression.SecurityExpressionRoot;import org.springframework.security.access.expression.method.MethodSecurityExpressionOperations;import org.springframework.security.core.Authentication;/\*\** Custom methods defined here will be accessible by spring security method annotations like @PreAuthorize.  \*/  public class CustomMethodSecurityExpressionRoot extends SecurityExpressionRoot implements  MethodSecurityExpressionOperations {  private final GambitService gambitService;  public CustomMethodSecurityExpressionRoot(Authentication authentication, ApplicationContext context) {  super(authentication);  gambitService = context.getBean(GambitService.class);  }  public boolean gambitAuthorize(AccessControlPolicy... policies) {  return gambitService.authorizeRequest((AuthenticationHolder) super.getAuthentication(), List.of(policies));  }  public AccessControlPolicy internalUser(String methodName, Object... args) {  return new AccessControlPolicy(UserType.INTERNAL_USER, methodName, args);  }  public AccessControlPolicy careManager(String methodName, Object... args) {  return new AccessControlPolicy(UserType.DASH_USER, methodName, args);  }  public AccessControlPolicy programUser(String methodName, Object... args) {  return new AccessControlPolicy(UserType.MOBILE_USER, methodName, args);  }  // Copied from Spring Security's access/expression/method/MethodSecurityExpressionRoot.java  private Object filterObject;  private Object returnObject;  private Object target;  @Override  public void setFilterObject(Object filterObject) {  this.filterObject = filterObject;  }  @Override  public Object getFilterObject() {  return filterObject;  }  @Override  public void setReturnObject(Object returnObject) {  this.returnObject = returnObject;  }  @Override  public Object getReturnObject() {  return returnObject;  }  void setThis(Object target) {  this.target = target;  }  @Override  public Object getThis() {  return target;  }  }