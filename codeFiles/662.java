package com.webprojekt.webblog.API;import com.webprojekt.webblog.BussinesLayer.WebBlogServices;import com.webprojekt.webblog.DAO.Session;import com.webprojekt.webblog.DAO.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.validation.FieldError;import org.springframework.web.bind.annotation.CookieValue;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletResponse;import java.time.Instant;import java.util.Optional;@Controllerpublic class SessionController {   private WebBlogServices webBlogServices;    @Autowired    public SessionController(WebBlogServices webBlogServices) {        this.webBlogServices = webBlogServices;    }    @GetMapping(&quot;/login&quot;)    public String login(Model model) {        model.addAttribute(&quot;login&quot;, new User (&quot;&quot;, &quot;&quot;));        return &quot;login&quot;;    }    @PostMapping(&quot;/login&quot;)    public String login(@ModelAttribute(&quot;login&quot;) User user, BindingResult bindingResult, HttpServletResponse response) {        Optional<User> optionalUser = webBlogServices.findByUsernameAndPassword(user.getUsername(), user.getPassword ());        if (optionalUser.isPresent()) {            Session session = new Session(optionalUser.get(), Instant.now().plusSeconds(7*24*60*60)); //expires one week from now            webBlogServices.addSession(session);           //store the session ID in a cookie to keep the username secret            Cookie cookie = new Cookie(&quot;sessionId&quot;, session.getId());            response.addCookie(cookie);            // Login successful            return &quot;redirect:/&quot;;        }        bindingResult.addError(new FieldError (&quot;login&quot;, &quot;password&quot;, &quot;Login not successful.&quot;));        return &quot;login&quot;;    }    @PostMapping(&quot;/logout&quot;)    public String logout(@CookieValue(value = &quot;sessionId&quot;, defaultValue = &quot;&quot;) String sessionId, HttpServletResponse response) {        Optional<Session> optionalSession = webBlogServices.findByIdAndExpiresAtAfter(sessionId, Instant.now());        optionalSession.ifPresent(session -> webBlogServices.delete(session));        Cookie cookie = new Cookie(&quot;sessionId&quot;, &quot;&quot;);        cookie.setMaxAge(0);        response.addCookie(cookie);        return &quot;redirect:/&quot;;    }}