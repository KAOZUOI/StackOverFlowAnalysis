public class TimeService extends Service{    private final static String TAG = TimeService.class.getName();      LocationEntity location = new LocationEntity();      private  Handler handler;    FusedLocationProviderClient fusedLocationProviderClient;       LocationRequest locationRequest;           LocationRequest newlocationRequest;       double Longitude, Latitude, Altitude,Acccuracy,Speed;      AppDatabase appDatabase;    @Override    public void onCreate() {        super.onCreate();        context=this;              fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);         appDatabase=AppDatabase.getDbIntance(this);              locationCallback = new LocationCallback() {            @Override            public void onLocationResult(@NonNull LocationResult locationResult) {                super.onLocationResult(locationResult);                Location location = locationResult.getLastLocation();                assert location != null;                Log.d(&quot;TAG&quot;, &quot;onLocationResult: callback method  &quot;+&quot;longitude &quot;+location.getLongitude()+&quot;latitude &quot;+location.getLatitude()+&quot;Accuracy &quot;+location.getAccuracy()+&quot;Speed &quot;+location.getSpeed());            }        };        startLocationUpdate();               handler = new Handler();        // Define the code block to be executed         Runnable runnable = new Runnable() {            @Override            public void run() {                // Insert custom code here                   startLocationUpdate();                Log.d(&quot;TAG&quot;, &quot;run: &quot;+&quot;run every 30s&quot;);                // Repeat every 2 seconds                handler.postDelayed(this, 30000L);            }        };// Start the Runnable immediately        handler.post(runnable);    }}    //Location function    //Setting all properties of Location    public void locationSettings() {//Put in the time service        newlocationRequest = new LocationRequest();        newlocationRequest.setInterval(30000);        newlocationRequest.setFastestInterval(5000);        //most accurate use GPS        newlocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);    }    public void updateGPS() {       // fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);        //user provided the permission , run the code        BaseView baseView = new BaseView();        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            // TODO: Consider calling            //    ActivityCompat#requestPermissions            // here to request the missing permissions, and then overriding            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,            //                                          int[] grantResults)            // to handle the case where the user grants the permission. See the documentation            // for ActivityCompat#requestPermi ssions for more details.            return;        }        fusedLocationProviderClient.getLastLocation().addOnSuccessListener(baseView, position -> {            Log.d(&quot;TAG&quot;, &quot;updateGPS: position elements are : &quot; + &quot;lon = &quot; + position.getLongitude() + &quot;lat = &quot; + position.getLatitude()+&quot;alt &quot;+position.getAltitude() + &quot;Acc= &quot; + position.getAccuracy() + &quot; Speed = &quot; + position.getSpeed());                location.setLongitude(position.getLongitude());                location.setLatitude(position.getLatitude());                location.setAltitude(position.getAltitude());                location.setAccuracy(position.getAccuracy());                location.setSpeed(position.getSpeed());            assert location!=null;            appDatabase.locationDao().insert(location);        });    }    public void startLocationUpdate() {        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            // TODO: Consider calling            //    ActivityCompat#requestPermissions            // here to request the missing permissions, and then overriding            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,            //                                          int[] grantResults)            // to handle the case where the user grants the permission. See the documentation            // for ActivityCompat#requestPermissions for more details.            return;        }        fusedLocationProviderClient.requestLocationUpdates(newlocationRequest,locationCallback, null);        updateGPS();    }}