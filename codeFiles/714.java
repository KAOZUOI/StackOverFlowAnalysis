public Mono<List<ObjectInfo>> getEventsForReference(String reference, Postcode postcode) {    return connector.resolveForExternalReference(reference)        .flatMapIterable(ResolvedObjectIds::getIds)        .flatMap(id -> getEventsFor(id)            .map(parcel -> redact(parcel, id, postcode)))        .collectList()        .doOnError(throwable -> log.error(SERVICE_ERROR, throwable.getMessage()));}private Mono<ParcelInfo> getEventsFor(ResolvedObjectId id) {    return gateway.getObjectBy(uid).zipWith(gateway.getEventsBy(uid)) //            .map(tuple -> combineEvents(tuple.getT1(), tuple.getT2()));}private ObjectInfo redact(ObjectInfo obj, ResolvedObjectId id, Postcode postcode) {    boolean fullResponse = ResolvedObjectId.isReturn(obj.getBarcode()) || uid.isReturn() || obj.hasPostcode(postcode);    return fullResponse ? parcel : redact(parcel);}