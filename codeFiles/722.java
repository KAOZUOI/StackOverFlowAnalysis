public class Example {  void go(Direction direction, int number, int index, int to) {    while (LEFT == direction ? i > to : i < to) {      i = direction.increment(i);      // ...      i = direction.decrement(i);      // ...      i = direction.floor(i, to);      // ...      var fromIndex = direction.fromIndex(index);    }  }}public enum Direction {  LEFT(&quot; <- left&quot;) {    @Override    int increment(int value) {      return --value;    }    @Override    int decrement(int value) {      return ++value;    }    @Override    int floor(int value, int limit) {      return Math.max(value, limit);    }    @Override    int fromIndex(int value) {      return value;    }  },    RIGHT(&quot; right ->&quot;) {    @Override    int increment(int value) {      return ++value;    }    @Override    int decrement(int value) {      return --value;    }    @Override    int floor(int value, int limit) {      return Math.min(value, limit);    }    @Override    int fromIndex(int value) {      return value + 1;    }  },  ;  final String sign;  Direction(String sign) {    this.sign = sign;  }  abstract int increment(int value);  abstract int decrement(int value);  abstract int floor(int value, int limit);  abstract int fromIndex(int value);  @Override  public String toString() {    return sign;  }}