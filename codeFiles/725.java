package com.example.destinationrouteplanner.ui;import static com.example.destinationrouteplanner.Constants.MAPVIEW_BUNDLE_KEY;import android.Manifest;import android.app.Fragment;import android.content.pm.PackageManager;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.example.destinationrouteplanner.R;import com.example.destinationrouteplanner.adapters.UserRecyclerAdapter;import com.example.destinationrouteplanner.models.MarkerCluster;import com.example.destinationrouteplanner.models.User;import com.example.destinationrouteplanner.models.UserLocation;import com.example.destinationrouteplanner.util.MyClusterManagerRenderer;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.MapView;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.LatLngBounds;import com.google.firebase.auth.FirebaseAuth;import com.google.maps.android.clustering.ClusterManager;import java.util.ArrayList;public class UserListFragment extends Fragment implements OnMapReadyCallback{    private static final String TAG = &quot;UserListFragment&quot;;    private RecyclerView mUserListRecyclerView;    private MapView mMapView;    private ArrayList<User> mUserList = new ArrayList<>();    private UserRecyclerAdapter mUserRecyclerAdapter;    private ArrayList<UserLocation> mUserLocations = new ArrayList<>();    private GoogleMap mGoogleMap;    private LatLngBounds mMapBoundary;    private UserLocation mUserPosition;    private ClusterManager mClusterManager;    private MyClusterManagerRenderer mClusterManagerRenderer;    private ArrayList<MarkerCluster> mClusterMarkers = new ArrayList<>();    public static UserListFragment newInstance() {        return new UserListFragment();    }    @Override    public void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            mUserList = getArguments().getParcelableArrayList(getString(R.string.intent_user_list));        }    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.fragment_user_list, container, false);        mUserListRecyclerView = view.findViewById(R.id.user_list_recycler_view);        mMapView = view.findViewById(R.id.user_list_map);        initUserListRecyclerView();        initGoogleMap(savedInstanceState);        return view;    }    private void initGoogleMap(Bundle savedInstanceState){        // *** IMPORTANT ***        // MapView requires that the Bundle you pass contain _ONLY_ MapView SDK        // objects or sub-Bundles.        Bundle mapViewBundle = null;        if (savedInstanceState != null) {            mapViewBundle = savedInstanceState.getBundle(MAPVIEW_BUNDLE_KEY);        }        mMapView.onCreate(mapViewBundle);        mMapView.getMapAsync(this);    }    private void initUserListRecyclerView() {        mUserRecyclerAdapter = new UserRecyclerAdapter(mUserList);        mUserListRecyclerView.setAdapter(mUserRecyclerAdapter);        mUserListRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));    }    @Override    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        Bundle mapViewBundle = outState.getBundle(MAPVIEW_BUNDLE_KEY);        if (mapViewBundle == null) {            mapViewBundle = new Bundle();            outState.putBundle(MAPVIEW_BUNDLE_KEY, mapViewBundle);        }        mMapView.onSaveInstanceState(mapViewBundle);    }    @Override    public void onResume() {        super.onResume();        mMapView.onResume();    }    @Override    public void onStart() {        super.onStart();        mMapView.onStart();    }    @Override    public void onStop() {        super.onStop();        mMapView.onStop();    }    @Override    public void onMapReady(GoogleMap map) {        if (ActivityCompat.checkSelfPermission(getActivity(), android.Manifest.permission.ACCESS_FINE_LOCATION)                != PackageManager.PERMISSION_GRANTED                && ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.ACCESS_COARSE_LOCATION)                != PackageManager.PERMISSION_GRANTED) {            // TODO: Consider calling            //    ActivityCompat#requestPermissions            // here to request the missing permissions, and then overriding            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,            //                                          int[] grantResults)            // to handle the case where the user grants the permission. See the documentation            // for ActivityCompat#requestPermissions for more details.            return;        }        map.setMyLocationEnabled(true);        mGoogleMap = map;        addMapMarkers();    }    @Override    public void onPause() {        mMapView.onPause();        super.onPause();    }    @Override    public void onDestroy() {        mMapView.onDestroy();        super.onDestroy();    }    @Override    public void onLowMemory() {        super.onLowMemory();        mMapView.onLowMemory();    }    private void addMapMarkers()    {        if (mGoogleMap !=null)        {            if(mClusterManager == null)            {                mClusterManager = new ClusterManager<MarkerCluster>(getActivity().getApplicationContext(), mGoogleMap);            }            if (mClusterManagerRenderer == null)            {                mClusterManagerRenderer = new MyClusterManagerRenderer(getActivity(), mGoogleMap, mClusterManager);                mClusterManager.setRenderer(mClusterManagerRenderer);            }            for (UserLocation userLocation: mUserLocations)            {                Log.d(TAG, &quot;AddMapMarkers: location: &quot; + userLocation.getGeo_point().toString());                try {                    String snippet = &quot;&quot;;                    if (userLocation.getUser().getUser_id().equals(FirebaseAuth.getInstance().getUid()))                    {                        snippet = &quot;This is you&quot;;                    }else {                        snippet = &quot;Determine route to &quot; + userLocation.getUser().getUsername() + &quot;?&quot;;                    }                    int avatar = R.drawable.speedvanimage; //Set the default avatar                    try {                        avatar = Integer.parseInt(userLocation.getUser().getAvatar());                    }catch (NumberFormatException e)                    {                        Log.d(TAG, &quot;addMapMarkers: no avatar for: &quot; + userLocation.getUser().getUsername() + &quot;, setting default&quot;);                    }                    MarkerCluster newMarkerCluster = new MarkerCluster(new LatLng(userLocation.getGeo_point().getLatitude(), userLocation.getGeo_point().getLongitude()),userLocation.getUser().getUsername(), snippet, avatar, userLocation.getUser());                    mClusterManager.addItem(newMarkerCluster);                    mClusterMarkers.add(newMarkerCluster);                }catch (NullPointerException e)                {                    Log.e(TAG, &quot;addMapMarkers: NullPointerException: &quot; + e.getMessage());                }            }            mClusterManager.cluster();            setCameraView();        }    }    private void setCameraView()    {        double bottomBoundary = mUserPosition.getGeo_point().getLatitude() - .1;        double leftBoundary = mUserPosition.getGeo_point().getLongitude() - .1;        double topBoundary = mUserPosition.getGeo_point().getLatitude() - .1;        double rightBoundary = mUserPosition.getGeo_point().getLongitude() - .1;    }}