public Collector<CourseResult, ?, String> printableStringCollector() {    return Collector.of(        StringBuilder::new,        (sb, courseResult) -> {            Person person = courseResult.getPerson();            Map<String, Integer> taskResults = courseResult.getTaskResults();            List<String> taskNames = taskResults.keySet().stream().sorted().collect(Collectors.toList());            // Calculate the total score and average mark            int totalScore = taskResults.values().stream().reduce(0, Integer::sum);            double averageMark = (double) totalScore / taskResults.size();            // Append the formatted row to the StringBuilder            sb.append(String.format(&quot;%-16s&quot;, person.getLastName() + &quot; &quot; + person.getFirstName()));            for (String taskName : taskNames) {                sb.append(String.format(&quot;|%-12s&quot;, taskResults.getOrDefault(taskName, 0)));            }            sb.append(String.format(&quot;|%-10.2f|%-5s|\n&quot;, averageMark, calculateMark(averageMark)));        },        // Combiner: Combine two StringBuilders by concatenating their contents        (sb1, sb2) -> sb1.append(sb2.toString()),        // Finisher: Return the final formatted table string        StringBuilder::toString);}private String calculateMark(double avg) {    return avg > 90 ? &quot;A&quot;         : avg >= 83 ? &quot;B&quot;             : avg >= 75 ? &quot;C&quot;                 : avg >= 68 ? &quot;D&quot;                     : avg >= 60 ? &quot;E&quot;                         : &quot;F&quot;;}