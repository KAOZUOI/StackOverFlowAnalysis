@Testcontainers@SpringBootTest@Slf4jpublic class AbstractIT {  private static final Network network = Network.newNetwork();  protected static GenericContainer ZOOKEEPER = new GenericContainer<>(      DockerImageName.parse(&quot;confluentinc/cp-zookeeper:7.2.0&quot;))      .withNetwork(network)      .withNetworkAliases(&quot;zookeeper&quot;)      .withEnv(Map.of(          &quot;ZOOKEEPER_CLIENT_PORT&quot;, &quot;2181&quot;,          &quot;ZOOKEEPER_TICK_TIME&quot;, &quot;2000&quot;));    protected static final KafkaContainer KAFKA = new KafkaContainer(      DockerImageName.parse(&quot;confluentinc/cp-kafka&quot;))      .withExternalZookeeper(&quot;zookeeper:2181&quot;)      .dependsOn(ZOOKEEPER)      .withNetwork(network)      .withNetworkAliases(&quot;broker&quot;);  protected static final GenericContainer SCHEMAREGSISTRY = new GenericContainer<>(      DockerImageName.parse(&quot;confluentinc/cp-schema-registry&quot;))      .dependsOn(ZOOKEEPER, KAFKA)      .withEnv(Map.of(          &quot;SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL&quot;, &quot;zookeeper:2181&quot;,          &quot;SCHEMA_REGISTRY_HOST_NAME&quot;, &quot;schemaregistry&quot;,          &quot;SCHEMA_REGISTRY_LISTENERS&quot;, &quot;http://0.0.0.0:8085&quot;,          &quot;SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS&quot;, &quot;broker:9092&quot;))      .withNetwork(network)      .withNetworkAliases(&quot;schemaregistry&quot;);  @DynamicPropertySource  static void registerPgProperties(DynamicPropertyRegistry registry) {    registry.add(&quot;bootstrap.servers&quot;, KAFKA::getBootstrapServers);    registry.add(&quot;spring.kafka.bootstrap-servers&quot;, KAFKA::getBootstrapServers);    registry.add(&quot;spring.kafka.consumer.auto-offset-reset&quot;, () -> &quot;earliest&quot;);    registry.add(&quot;spring.data.mongodb.uri&quot;, MONGODB::getConnectionString);    registry.add(&quot;spring.data.mongodb.database&quot;, () ->&quot;test&quot;);  }//container startup, shutdown as well as topic creation omitted for brevity}