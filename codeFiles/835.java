package oracle.apps.bi.contentstore.common.redis;import oracle.apps.bi.contentstore.common.model.RedisValue;import oracle.apps.bi.contentstore.common.util.Constants;import oracle.apps.bi.contentstore.config.PodConfigUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisClusterConfiguration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import java.util.Arrays;import java.util.List;@Configurationpublic class JedisManagerBoot {    @Autowired    PodConfigUtil podConfigUtil;    public final String redisHost = Constants.REDIS_HOST_PORT;    @Bean    public RedisConnectionFactory connectionFactory() {        String redisHostNamePort = getConfiguredRedisHost();        List<String> clusterNodes = Arrays.asList(redisHostNamePort.split(&quot;,[ ]*&quot;));        RedisClusterConfiguration clusterConfig = new RedisClusterConfiguration(clusterNodes);        // get the redis password from SecretSvc        if(!podConfigUtil.isTestMode()) {            String password = podConfigUtil.getRedisPwd();            clusterConfig.setPassword(password);        }        return new JedisConnectionFactory(clusterConfig);    }    @Bean    public RedisTemplate<String, RedisValue> redisTemplate() {        RedisTemplate<String, RedisValue> redisTemplate = new RedisTemplate<>();        redisTemplate.setConnectionFactory(connectionFactory());        return redisTemplate;    }    private String getConfiguredRedisHost() {        return redisHost;    }