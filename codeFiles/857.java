package com.examDemo.exam.dialect;import org.hibernate.dialect.Dialect;import org.hibernate.dialect.function.StandardSQLFunction;import java.sql.*;public class SQLiteDialect extends Dialect {    public SQLiteDialect() {        registerColumnType(Types.BIT, &quot;integer&quot;);        registerColumnType(Types.TINYINT, &quot;tinyint&quot;);        registerColumnType(Types.SMALLINT, &quot;smallint&quot;);        registerColumnType(Types.INTEGER, &quot;integer&quot;);        registerColumnType(Types.BIGINT, &quot;bigint&quot;);        registerColumnType(Types.FLOAT, &quot;float&quot;);        registerColumnType(Types.REAL, &quot;real&quot;);        registerColumnType(Types.DOUBLE, &quot;double&quot;);        registerColumnType(Types.NUMERIC, &quot;numeric&quot;);        registerColumnType(Types.DECIMAL, &quot;decimal&quot;);        registerColumnType(Types.CHAR, &quot;char&quot;);        registerColumnType(Types.VARCHAR, &quot;varchar&quot;);        registerColumnType(Types.LONGVARCHAR, &quot;longvarchar&quot;);        registerColumnType(Types.DATE, &quot;date&quot;);        registerColumnType(Types.TIME, &quot;time&quot;);        registerColumnType(Types.TIMESTAMP, &quot;timestamp&quot;);        registerColumnType(Types.BINARY, &quot;blob&quot;);        registerColumnType(Types.VARBINARY, &quot;blob&quot;);        registerColumnType(Types.LONGVARBINARY, &quot;blob&quot;);        // registerColumnType(Types.NULL, &quot;null&quot;);        registerColumnType(Types.BLOB, &quot;blob&quot;);        registerColumnType(Types.CLOB, &quot;clob&quot;);        registerColumnType(Types.BOOLEAN, &quot;integer&quot;);        registerKeyword(&quot;concat&quot;, new VarArgsSQLFunction(StringType.INSTANCE, &quot;&quot;, &quot;||&quot;, &quot;&quot;));        registerKeyword(&quot;mod&quot;, new SQLFunctionTemplate(StringType.INSTANCE, &quot;?1 % ?2&quot;));        registerKeyword(&quot;substr&quot;, new StandardSQLFunction(&quot;substr&quot;, StringType.INSTANCE));        registerKeyword(&quot;substring&quot;, new StandardSQLFunction(&quot;substr&quot;, StringType.INSTANCE));    }    public boolean supportsIdentityColumns() {        return true;    }    public boolean hasDataTypeInIdentityColumn() {        return false; // As specify in NHibernate dialect    }    public String getIdentityColumnString() {        // return &quot;integer primary key autoincrement&quot;;        return &quot;integer&quot;;    }    public String getIdentitySelectString() {        return &quot;select last_insert_rowid()&quot;;    }    public boolean supportsLimit() {        return true;    }    protected String getLimitString(String query, boolean hasOffset) {        return new StringBuffer(query.length() + 20).append(query).append(hasOffset ? &quot; limit ? offset ?&quot; : &quot; limit ?&quot;)                .toString();    }    public boolean supportsTemporaryTables() {        return true;    }    public String getCreateTemporaryTableString() {        return &quot;create temporary table if not exists&quot;;    }    public boolean dropTemporaryTableAfterUse() {        return false;    }    public boolean supportsCurrentTimestampSelection() {        return true;    }    public boolean isCurrentTimestampSelectStringCallable() {        return false;    }    public String getCurrentTimestampSelectString() {        return &quot;select current_timestamp&quot;;    }    public boolean supportsUnionAll() {        return true;    }    public boolean hasAlterTable() {        return false; // As specify in NHibernate dialect    }    public boolean dropConstraints() {        return false;    }    public String getAddColumnString() {        return &quot;add column&quot;;    }    public String getForUpdateString() {        return &quot;&quot;;    }    public boolean supportsOuterJoinForUpdate() {        return false;    }    public String getDropForeignKeyString() {        throw new UnsupportedOperationException(&quot;No drop foreign key syntax supported by SQLiteDialect&quot;);    }    public String getAddForeignKeyConstraintString(String constraintName, String[] foreignKey, String referencedTable,                                                   String[] primaryKey, boolean referencesPrimaryKey) {        throw new UnsupportedOperationException(&quot;No add foreign key syntax supported by SQLiteDialect&quot;);    }    public String getAddPrimaryKeyConstraintString(String constraintName) {        throw new UnsupportedOperationException(&quot;No add primary key syntax supported by SQLiteDialect&quot;);    }    public boolean supportsIfExistsBeforeTableName() {        return true;    }    public boolean supportsCascadeDelete() {        return false;    }}