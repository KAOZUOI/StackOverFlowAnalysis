 @Bean(name = DispatcherServletAutoConfiguration. DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)    public DispatcherServlet dispatcherServlet (WebMvProperties webMvcProperties) {        DispatcherServlet dispatcherServlet = new DispatcherServletO:        dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());        dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());        dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvProperties.isThrowExceptionIfNoHandlerFound());         dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());        dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());        dispatcherServlet.setThreadContextInheritable(true);        log. debug(&quot;init project dispatcher servlet&quot;)        return dispatcherServlet;    }@Bean    @ConditionalOnMissingBean({RequestContextListener.class, RequestContextFilter.class})    @ConditionalOnMissingFilterBean(RequestContextFilter.class)    public RequestContextFilter requestContextFilter() {        OrderedRequestContextFilter orderedRequestContextFilter = new OrderedRequestContextFilter();        orderedRequestContextFilter.setThreadContextInheritable(true);        log.debug(&quot;init project request context filter!&quot;);        return orderedRequestContextFilter;    }