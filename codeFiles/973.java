` public PdfPTable buildComments(int mBottom) throws IOException {        PdfPTable table = new PdfPTable(1);        try {                reportPrintUtilities.setCellGrey(cellGrey);                reportPrintUtilities.setReport(report);                            table.setTotalWidth(width);                table.setLockedWidth(true);                try {                    String htmlContent = &quot;<div class=\&quot;ql-editor\&quot;>&quot; + report.getComment() + &quot;</div>&quot;;                    createHtmlFile();                    table.addCell(reportPrintUtilities.buildCell(new Phrase(&quot;Additional Comments&quot;, headFont), 1, 1, 18, &quot;center&quot;, 2, 2, 1, 1, true, false));                    buildCommentHtmlFile(htmlContent);                    File htmlFile = new File(HTML_FILE);                    org.jsoup.nodes.Document doc = createWellFormedHtml(htmlFile);                    xhtmlToPdf(doc, PDF_OUTPUT);                    //table.addCell(cell);                    //Element qlEditor = (Element) doc.body().getElementsByClass(&quot;ql-editor&quot;);                    //String extractedText = extractTextFromPdf(PDF_OUTPUT);                    PdfPCell cell = new PdfPCell(new Paragraph(doc.body().html()));                    table.addCell(cell);                    //htmlFile.delete();                } catch (Exception e) {                    e.printStackTrace();                }                table.setSpacingBefore(5F);        } catch(DocumentException de) {            throw new ExceptionConverter(de);        }        return table;    }    public void createHtmlFile() throws IOException {        File file = new File(HTML_FILE);        if (!file.exists()) file.createNewFile();        StringBuilder htmlBuilder = new StringBuilder();        htmlBuilder.append(&quot;<!DOCTYPE html>\n&quot; +                &quot;<head>\n&quot; +                CSS_FILE +&quot;\n&quot;+                &quot; <style>\n&quot; +                &quot;  body {\n&quot; +                &quot;   margin: 0;\n&quot; +                &quot;   padding: 0;\n&quot; +                &quot;  }\n&quot; +                &quot;  p, h1, h2, h3 {\n&quot; +                &quot;   margin: 0;\n&quot; +                &quot;   padding: 0;\n&quot; +                &quot;  }\n&quot; +                &quot; </style>\n&quot; +                &quot;</head>\n&quot; +                &quot;<body>\n&quot; +                &quot;</body>\n&quot; +                &quot;</html>&quot;);        FileWriter writer = new FileWriter(file);        writer.write(htmlBuilder.toString());        writer.close();    }    public void buildCommentHtmlFile(String htmlString) throws IOException {        File inputHTML = new File(HTML_FILE);        org.jsoup.nodes.Document doc = Jsoup.parse(inputHTML, &quot;UTF-8&quot;);        org.jsoup.nodes.Element body = doc.body();        body.append(htmlString);        FileWriter writer = new FileWriter(inputHTML);        writer.write(doc.outerHtml());        writer.close();    }    private org.jsoup.nodes.Document createWellFormedHtml(File inputHTML) throws IOException {        org.jsoup.nodes.Document document = Jsoup.parse(inputHTML, &quot;UTF-8&quot;);        document.outputSettings().syntax(org.jsoup.nodes.Document.OutputSettings.Syntax.xml);        return document;    }    private void xhtmlToPdf(org.jsoup.nodes.Document doc, String outputPdf) throws IOException {        try (OutputStream os = new FileOutputStream(outputPdf)) {            String baseUri = FileSystems.getDefault()                    .getPath(&quot;src/main/resources/&quot;)                    .toUri()                    .toString();            PdfRendererBuilder builder = new PdfRendererBuilder();            builder.withUri(outputPdf);            builder.toStream(os);            builder.withW3cDocument(new W3CDom().fromJsoup(doc), baseUri);            builder.run();        }    }Here is part of my code that generates the pdf:        Rectangle pdfLayout = PageSize.A4;        ReportHeaderFooter headerFooter = new ReportHeaderFooter();        headerFooter.setCloudfront(cloudfront);        headerFooter.setReport(report);        headerFooter.setCellGrey(cellGrey);        Document document = new Document(pdfLayout, 5, 5, 85, mBottom);        float width = document.getPageSize().getWidth() - 10;        ReportSectionOne reportSectionOne = new ReportSectionOne();        reportSectionOne.setReport(report);        reportSectionOne.setCellGrey(cellGrey);        reportSectionOne.setWidth(width);        String testDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(report.getTestDate());        String fileName = report.getReportNo() + &quot;-&quot; + report.getMethodType() + &quot;-&quot; + testDate +   &quot;.pdf&quot;;        reportPrintUtilities.setCloudfront(cloudfront);        reportPrintUtilities.setReport(report);        reportPrintUtilities.setCellGrey(cellGrey);        File pdfFile = new File(fileName);        FileOutputStream fos = new FileOutputStream(pdfFile);        PdfWriter writer = PdfWriter.getInstance(document, fos);        writer.open();        writer.setFullCompression();        writer.setPageEvent(headerFooter);        document.open();                        // Comments        if(!report.getComment().isEmpty()){            ReportComments reportComments = new ReportComments();            reportComments.setReport(report);            reportComments.setWidth(width);            reportComments.setCellGrey(cellGrey);            reportComments.setCloudfront(cloudfront);            reportComments.setDocument(document);            document.add(reportComments.buildComments(mBottom));        }